{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"source/images/bandwidth2.png","path":"images/bandwidth2.png","modified":0},{"_id":"themes/jacman/source/js/totop.js","path":"js/totop.js","modified":0},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","path":"js/jquery.qrcode-0.12.0.min.js","modified":0},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0},{"_id":"themes/jacman/source/js/gallery.js","path":"js/gallery.js","modified":0},{"_id":"themes/jacman/source/img/scrollup.png","path":"img/scrollup.png","modified":0},{"_id":"themes/jacman/source/img/name2.png","path":"img/name2.png","modified":0},{"_id":"themes/jacman/source/img/name.png","path":"img/name.png","modified":0},{"_id":"themes/jacman/source/img/logo.svg","path":"img/logo.svg","modified":0},{"_id":"themes/jacman/source/img/logo.png","path":"img/logo.png","modified":0},{"_id":"themes/jacman/source/img/jacman.jpg","path":"img/jacman.jpg","modified":0},{"_id":"themes/jacman/source/img/favicon.ico","path":"img/favicon.ico","modified":0},{"_id":"themes/jacman/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":0},{"_id":"themes/jacman/source/img/cc-by.svg","path":"img/cc-by.svg","modified":0},{"_id":"themes/jacman/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":0},{"_id":"themes/jacman/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":0},{"_id":"themes/jacman/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":0},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":0},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":0},{"_id":"themes/jacman/source/img/banner.jpg","path":"img/banner.jpg","modified":0},{"_id":"themes/jacman/source/img/author.jpg","path":"img/author.jpg","modified":0},{"_id":"themes/jacman/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":0},{"_id":"themes/jacman/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":0},{"_id":"themes/jacman/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":0},{"_id":"themes/jacman/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":0},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":0},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":0},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":0},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":0},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":0},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":0},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":0},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":0},{"_id":"themes/jacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":0},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/jacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/jacman/source/css/style.styl","path":"css/style.styl","modified":0},{"_id":"source/CNAME","path":"CNAME","modified":0}],"Cache":[{"_id":"source/404.html","shasum":"8ec31aa1dc4007577d3413eefbe6bba2430a964d","modified":1448933725000},{"_id":"source/CNAME","shasum":"72002ea97fdacb9179dce968c5564b4d8d1793a4","modified":1448933143000},{"_id":"source/_posts/KMP/robust.jpg","shasum":"979379fc56f66313fb603f6b548a4bcd14571082","modified":1468205544000},{"_id":"source/_posts/KMP/suffix.jpg","shasum":"c26c94554908d0b3b3ff4da334d0dcc2d10695f2","modified":1468210843000},{"_id":"source/_posts/KMP.md","shasum":"1b4db4582f81a4c8272f1a7fbd7749e55416fe2f","modified":1468247706000},{"_id":"source/_posts/bandwidthforinteldevice/bandwidth1.png","shasum":"6a64278d6fe3c606c2ccdc72231fffa820a5283d","modified":1467385191000},{"_id":"source/_posts/bandwidthforinteldevice/bwperthread.png","shasum":"6c481fdbd8fe3432725ab15d520b36d04b0331b8","modified":1467386345000},{"_id":"source/_posts/bandwidthforinteldevice/machinebalance.png","shasum":"cd31da3126ad4e445f2ec3dad58f3fa91dd679a0","modified":1467386440000},{"_id":"source/_posts/bandwidthforinteldevice.md","shasum":"0b228b91dbebb1dd11c7700b42bc0bcc90c40922","modified":1467426249000},{"_id":"source/_posts/gccinstall.md","shasum":"d24d4c5a183acbb281e75993f79b7d219e13d27f","modified":1450004464000},{"_id":"source/_posts/hello-world.md","shasum":"d97a9f71814083ddd15dbba6da33d8724a8abacd","modified":1448780347000},{"_id":"source/_posts/micarray.md","shasum":"16b30fe06ff8014ea735d4b6bfdb7caff32eb01b","modified":1467782371000},{"_id":"source/_posts/vim-search-and-replace.md","shasum":"2680d6614c4d755e1d2e59f6ef6a2ab9d7ff8b41","modified":1469003425000},{"_id":"source/images/bandwidth2.png","shasum":"6a64278d6fe3c606c2ccdc72231fffa820a5283d","modified":1467385191000},{"_id":"themes/jacman/LICENSE","shasum":"931516aa36c53eb7843c83d82662eb50cc3c4367","modified":1448779842000},{"_id":"themes/jacman/README.md","shasum":"79be8a49927c8666f1804d7ccd08af8d3268062a","modified":1448779842000},{"_id":"themes/jacman/README_zh.md","shasum":"0854e4c96f53005f3a47e21af3f8aee361719ce4","modified":1448779842000},{"_id":"themes/jacman/_config.yml","shasum":"c698f02f9f3104ed8ac99579bfcba1fa38e25684","modified":1467378076000},{"_id":"themes/jacman/languages/default.yml","shasum":"eea72d6138497287c0b3f4bd93e4f6f62b7aff37","modified":1448779842000},{"_id":"themes/jacman/languages/zh-CN.yml","shasum":"1f3b9d00dd4322352b0c9c82a76dc9865a616d41","modified":1448779842000},{"_id":"themes/jacman/languages/zh-TW.yml","shasum":"61a02ba818d641579a86fcd7f5926ab1e6ab5f70","modified":1448779842000},{"_id":"themes/jacman/layout/_partial/after_footer.ejs","shasum":"806dc4349387eec9179000ad7c9fef4023a72aab","modified":1448779842000},{"_id":"themes/jacman/layout/_partial/analytics.ejs","shasum":"fd004beb8d4500afd5fb3b3871a95afa2a375f16","modified":1448779842000},{"_id":"themes/jacman/layout/_partial/archive.ejs","shasum":"2c7395e7563fe016521712a645c28a13f952d52a","modified":1448779842000},{"_id":"themes/jacman/layout/_partial/article.ejs","shasum":"261ecacb8456f4cb972632b6a9103860fa63b9a3","modified":1448779842000},{"_id":"themes/jacman/layout/_partial/article_row.ejs","shasum":"4cb855d91ece7f67b2ca0992fffa55472d0b9c93","modified":1448779842000},{"_id":"themes/jacman/layout/_partial/categories.ejs","shasum":"8a52d0344d5bce1925cf586ed73c11192925209b","modified":1448779842000},{"_id":"themes/jacman/layout/_partial/footer.ejs","shasum":"32db7e7c8171530d29c3878f387c4438d6057508","modified":1448779842000},{"_id":"themes/jacman/layout/_partial/head.ejs","shasum":"761941be4922cd3c177c8130296b909bf7db5c09","modified":1448779842000},{"_id":"themes/jacman/layout/_partial/header.ejs","shasum":"18515612344ff048b9372b91b7eef6f3b143801f","modified":1448779842000},{"_id":"themes/jacman/layout/_partial/mathjax.ejs","shasum":"d42994ac696f52ba99c1cbac382cd76d5b04a3e8","modified":1448779842000},{"_id":"themes/jacman/layout/_partial/pagination.ejs","shasum":"6146ac37dfb4f8613090bc52b3fc8cfa911a186a","modified":1448779842000},{"_id":"themes/jacman/layout/_partial/post/article.ejs","shasum":"b09e3acea7076e1f01dfe0c2295e19951ea09437","modified":1448779842000},{"_id":"themes/jacman/layout/_partial/post/catetags.ejs","shasum":"0e37bababc8f4659f5b59a552a946b46d89e4158","modified":1448779842000},{"_id":"themes/jacman/layout/_partial/post/comment.ejs","shasum":"c88bc8f5805173920a5fdd7e9234a850e3d8e151","modified":1448779842000},{"_id":"themes/jacman/layout/_partial/post/footer.ejs","shasum":"b12ec08a5845a3d8c01257614f1dfead879c87d2","modified":1448779842000},{"_id":"themes/jacman/layout/_partial/post/gallery.ejs","shasum":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1448779842000},{"_id":"themes/jacman/layout/_partial/post/header.ejs","shasum":"36a705942b691abe0d643ea8afa339981b32f6f2","modified":1448779842000},{"_id":"themes/jacman/layout/_partial/post/jiathis.ejs","shasum":"d7f5960039ac74924559ab6ba03c64457b8f0966","modified":1448779842000},{"_id":"themes/jacman/layout/_partial/post/pagination.ejs","shasum":"7de9c07a4c968429a8088c31a28b7f3a993ded1b","modified":1448779842000},{"_id":"themes/jacman/layout/_partial/search.ejs","shasum":"1083824a6c6c3df02767f2f3b727aee78ebb76ec","modified":1448779842000},{"_id":"themes/jacman/layout/_partial/sidebar.ejs","shasum":"c4f527fff0070fbe65919053a16224412317f40d","modified":1448779842000},{"_id":"themes/jacman/layout/_partial/tags.ejs","shasum":"b33b2b5d08f1d53a8de25a95f660f7f1cea7b3cb","modified":1448779842000},{"_id":"themes/jacman/layout/_partial/tinysou_search.ejs","shasum":"06ecddc8a9d40b480fe2e958af1dab857a9d5441","modified":1448779842000},{"_id":"themes/jacman/layout/_partial/totop.ejs","shasum":"bea5bb7cb9350b8af7d97a8d223af63a5b30ab78","modified":1448779842000},{"_id":"themes/jacman/layout/_widget/archive.ejs","shasum":"39ea6b7888406fbd1b4cf236ebd718e881493374","modified":1448779842000},{"_id":"themes/jacman/layout/_widget/category.ejs","shasum":"c1fae96b5053da021bcc04ab2ce5c2c8d30de8a2","modified":1448779842000},{"_id":"themes/jacman/layout/_widget/douban.ejs","shasum":"e3820c36169e88663e6c9177666b2904c1ce47e6","modified":1448779842000},{"_id":"themes/jacman/layout/_widget/github-card.ejs","shasum":"5c759b6ea214bac56a393247de27e67ce73fb33f","modified":1448779842000},{"_id":"themes/jacman/layout/_widget/links.ejs","shasum":"e49868063439c2092cdf9a8ec82cc295b0e42f66","modified":1448779842000},{"_id":"themes/jacman/layout/_widget/rss.ejs","shasum":"0a4b5f2a2e36a1d504fe2e7c6c8372cbb4628aab","modified":1448779842000},{"_id":"themes/jacman/layout/_widget/tag.ejs","shasum":"7e82ad9c916b9ce871b2f65ce8f283c5ba47947b","modified":1448779842000},{"_id":"themes/jacman/layout/_widget/tagcloud.ejs","shasum":"10a1001189d5c28ce6d42494563b9637c302b454","modified":1448779842000},{"_id":"themes/jacman/layout/_widget/weibo.ejs","shasum":"a31c2b223d0feb2a227e203cac9e5d13b7d328a8","modified":1448779842000},{"_id":"themes/jacman/layout/archive.ejs","shasum":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1448779842000},{"_id":"themes/jacman/layout/category.ejs","shasum":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1448779842000},{"_id":"themes/jacman/layout/index.ejs","shasum":"75cef2172c286994af412e11ab7f4f5a0daaf1f5","modified":1448779842000},{"_id":"themes/jacman/layout/layout.ejs","shasum":"5b4289a4526899809b9c2facea535367ff51ba2b","modified":1448779842000},{"_id":"themes/jacman/layout/page.ejs","shasum":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1448779842000},{"_id":"themes/jacman/layout/post.ejs","shasum":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1448779842000},{"_id":"themes/jacman/layout/tag.ejs","shasum":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1448779842000},{"_id":"themes/jacman/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1448779842000},{"_id":"themes/jacman/source/css/_base/font.styl","shasum":"c8a0faf43b08e37ad07a5669db76d595da966159","modified":1448779842000},{"_id":"themes/jacman/source/css/_base/highlight/highlight.styl","shasum":"91b62bfc58390b0d5db782a75be6965ee3665eb3","modified":1448779842000},{"_id":"themes/jacman/source/css/_base/highlight/theme.styl","shasum":"e3a59bd427ba37a54ead9eeba9a5356b3f720a48","modified":1448779842000},{"_id":"themes/jacman/source/css/_base/public.styl","shasum":"f016180726019927b9a835ed01e04d153f27a149","modified":1448779842000},{"_id":"themes/jacman/source/css/_base/variable.styl","shasum":"cb652eb83c28a208743fabab92de896f8b7cbf7b","modified":1448779842000},{"_id":"themes/jacman/source/css/_partial/article.styl","shasum":"c69641b4a34a8c62986b335414413dbde26de25e","modified":1448779842000},{"_id":"themes/jacman/source/css/_partial/aside.styl","shasum":"506fde1d67ce750452cbe84bee01a19c7d027c5e","modified":1448779842000},{"_id":"themes/jacman/source/css/_partial/duoshuo.styl","shasum":"e85f1192283f043115c272a9deb3cb6ced793990","modified":1448779842000},{"_id":"themes/jacman/source/css/_partial/footer.styl","shasum":"1911613a19b605a58f801c21b03b5d4c83b90f9c","modified":1448779842000},{"_id":"themes/jacman/source/css/_partial/gallery.styl","shasum":"7246809f4ce3166ec1b259bf475cae1a48e29aad","modified":1448779842000},{"_id":"themes/jacman/source/css/_partial/header.styl","shasum":"5121ceb712be3f2dde98b8b6e589b546e19eab8f","modified":1448779842000},{"_id":"themes/jacman/source/css/_partial/helper.styl","shasum":"1136600932b97534b88465bf05ef313630b2de3d","modified":1448779842000},{"_id":"themes/jacman/source/css/_partial/index.styl","shasum":"e8d403513f4eaeaf2a539ff142a14e6e38fbf55c","modified":1448779842000},{"_id":"themes/jacman/source/css/_partial/totop.styl","shasum":"96363d7c5aaed5f649667fc0752a62620a67e872","modified":1448779842000},{"_id":"themes/jacman/source/css/style.styl","shasum":"a0a45af186a72ae68979bf26f2a5d0d2303189ca","modified":1448779842000},{"_id":"themes/jacman/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1448779842000},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1448779842000},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1448779842000},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1448779842000},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1448779842000},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1448779842000},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1448779842000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1448779842000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1448779842000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1448779842000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1448779842000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1448779842000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1448779842000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1448779842000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1448779842000},{"_id":"themes/jacman/source/font/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1448779842000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","shasum":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1448779842000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","shasum":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1448779842000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","shasum":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1448779842000},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1448779842000},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1448779842000},{"_id":"themes/jacman/source/font/fontdiao.eot","shasum":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1448779842000},{"_id":"themes/jacman/source/font/fontdiao.ttf","shasum":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1448779842000},{"_id":"themes/jacman/source/font/fontdiao.woff","shasum":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1448779842000},{"_id":"themes/jacman/source/img/author.jpg","shasum":"7a07ae6c0e0f42c17807271f1406607ce654addf","modified":1448777343000},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1448764926000},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1448764926000},{"_id":"themes/jacman/source/img/cc-by-nc.svg","shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1448764926000},{"_id":"themes/jacman/source/img/cc-by-nd.svg","shasum":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1448764926000},{"_id":"themes/jacman/source/img/cc-by-sa.svg","shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1448764926000},{"_id":"themes/jacman/source/img/cc-by.svg","shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1448764926000},{"_id":"themes/jacman/source/img/cc-zero.svg","shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1448764926000},{"_id":"themes/jacman/source/img/favicon.ico","shasum":"2d22a3e0c7905a894e832c831dd91c29c209c7a5","modified":1448764926000},{"_id":"themes/jacman/source/img/jacman.jpg","shasum":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1448764926000},{"_id":"themes/jacman/source/img/logo.svg","shasum":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1448764926000},{"_id":"themes/jacman/source/img/name.png","shasum":"cbbabffbd059ab54c67892a9d665e198fc7904ef","modified":1448776121000},{"_id":"themes/jacman/source/img/name2.png","shasum":"13b26f3912f3b9fe645d522136c99e2af9f0f43e","modified":1448776453000},{"_id":"themes/jacman/source/img/scrollup.png","shasum":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1448764926000},{"_id":"themes/jacman/source/js/gallery.js","shasum":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1448779842000},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","shasum":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1448779842000},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","shasum":"57c3987166a26415a71292162690e82c21e315ad","modified":1448779842000},{"_id":"themes/jacman/source/js/totop.js","shasum":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1448779842000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","shasum":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1448779842000},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1448779842000},{"_id":"themes/jacman/source/font/fontdiao.svg","shasum":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1448779842000},{"_id":"themes/jacman/source/img/logo.png","shasum":"fd08d12d1fa147cf894e8f8327e38f1758de32ed","modified":1448764926000},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","shasum":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1448779842000},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1448779842000},{"_id":"themes/jacman/source/img/banner.jpg","shasum":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1448764926000},{"_id":"public/images/bandwidth2.png","modified":1473653654956,"shasum":"6a64278d6fe3c606c2ccdc72231fffa820a5283d"},{"_id":"public/js/totop.js","modified":1473653654962,"shasum":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb"},{"_id":"public/js/jquery.qrcode-0.12.0.min.js","modified":1473653654966,"shasum":"57c3987166a26415a71292162690e82c21e315ad"},{"_id":"public/js/jquery.imagesloaded.min.js","modified":1473653654969,"shasum":"4109837b1f6477bacc6b095a863b1b95b1b3693f"},{"_id":"public/js/jquery-2.0.3.min.js","modified":1473653654971,"shasum":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d"},{"_id":"public/js/gallery.js","modified":1473653654973,"shasum":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed"},{"_id":"public/img/scrollup.png","modified":1473653654974,"shasum":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3"},{"_id":"public/img/name2.png","modified":1473653654976,"shasum":"13b26f3912f3b9fe645d522136c99e2af9f0f43e"},{"_id":"public/img/name.png","modified":1473653654979,"shasum":"cbbabffbd059ab54c67892a9d665e198fc7904ef"},{"_id":"public/img/logo.svg","modified":1473653654982,"shasum":"9ae38f7225c38624faeb7b74996efa9de7bf065b"},{"_id":"public/img/logo.png","modified":1473653654983,"shasum":"fd08d12d1fa147cf894e8f8327e38f1758de32ed"},{"_id":"public/img/jacman.jpg","modified":1473653654985,"shasum":"0ba14a4a5e3be012826fc713c33479912126d34e"},{"_id":"public/img/favicon.ico","modified":1473653654986,"shasum":"2d22a3e0c7905a894e832c831dd91c29c209c7a5"},{"_id":"public/img/cc-zero.svg","modified":1473653654988,"shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030"},{"_id":"public/img/cc-by.svg","modified":1473653654989,"shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e"},{"_id":"public/img/cc-by-sa.svg","modified":1473653654991,"shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e"},{"_id":"public/img/cc-by-nd.svg","modified":1473653654993,"shasum":"c563508ce9ced1e66948024ba1153400ac0e0621"},{"_id":"public/img/cc-by-nc.svg","modified":1473653654995,"shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7"},{"_id":"public/img/cc-by-nc-sa.svg","modified":1473653654996,"shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e"},{"_id":"public/img/cc-by-nc-nd.svg","modified":1473653654998,"shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564"},{"_id":"public/img/banner.jpg","modified":1473653654999,"shasum":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74"},{"_id":"public/img/author.jpg","modified":1473653655001,"shasum":"7a07ae6c0e0f42c17807271f1406607ce654addf"},{"_id":"public/font/fontdiao.woff","modified":1473653655002,"shasum":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f"},{"_id":"public/font/fontdiao.ttf","modified":1473653655005,"shasum":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab"},{"_id":"public/font/fontdiao.svg","modified":1473653655006,"shasum":"334a94e6a66a8b089be7315d876bec93efe38d2b"},{"_id":"public/font/fontdiao.eot","modified":1473653655009,"shasum":"9544a0d7ba208989302bc4da5a184faeb0e883c9"},{"_id":"public/font/fontawesome-webfont.woff","modified":1473653655011,"shasum":"04c3bf56d87a0828935bd6b4aee859995f321693"},{"_id":"public/font/fontawesome-webfont.ttf","modified":1473653655012,"shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f"},{"_id":"public/font/fontawesome-webfont.svg","modified":1473653655014,"shasum":"46fcc0194d75a0ddac0a038aee41b23456784814"},{"_id":"public/font/fontawesome-webfont.eot","modified":1473653655020,"shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e"},{"_id":"public/font/coveredbyyourgrace-webfont.woff","modified":1473653655024,"shasum":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e"},{"_id":"public/font/coveredbyyourgrace-webfont.ttf","modified":1473653655025,"shasum":"194ccb4acf77a03dc25bcc174edb266143704fec"},{"_id":"public/font/coveredbyyourgrace-webfont.svg","modified":1473653655027,"shasum":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53"},{"_id":"public/font/coveredbyyourgrace-webfont.eot","modified":1473653655030,"shasum":"a17d0f10534303e40f210c506ebb8703fa23b7de"},{"_id":"public/font/FontAwesome.otf","modified":1473653655032,"shasum":"b5b4f9be85f91f10799e87a083da1d050f842734"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1473653655035,"shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"public/fancybox/jquery.fancybox.js","modified":1473653655037,"shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1473653655039,"shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1473653655041,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1473653655043,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","modified":1473653655044,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","modified":1473653655053,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","modified":1473653655055,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/fancybox/helpers/fancybox_buttons.png","modified":1473653655056,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1473653655057,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1473653655058,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1473653655059,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1473653655059,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1473653655060,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1473653655061,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1473653656087,"shasum":"25bc931b468cb14b756921f90e6b6dcc8ebb1c6f"},{"_id":"public/CNAME","modified":1473653656341,"shasum":"72002ea97fdacb9179dce968c5564b4d8d1793a4"},{"_id":"public/2016/07/01/bandwidthforinteldevice/bandwidth1.png","modified":1473653656342,"shasum":"6a64278d6fe3c606c2ccdc72231fffa820a5283d"},{"_id":"public/2016/07/01/bandwidthforinteldevice/bwperthread.png","modified":1473653656343,"shasum":"6c481fdbd8fe3432725ab15d520b36d04b0331b8"},{"_id":"public/2016/07/01/bandwidthforinteldevice/machinebalance.png","modified":1473653656344,"shasum":"cd31da3126ad4e445f2ec3dad58f3fa91dd679a0"},{"_id":"public/2016/07/11/KMP/robust.jpg","modified":1473653656346,"shasum":"979379fc56f66313fb603f6b548a4bcd14571082"},{"_id":"public/2016/07/11/KMP/suffix.jpg","modified":1473653656350,"shasum":"c26c94554908d0b3b3ff4da334d0dcc2d10695f2"},{"_id":"public/404.html","modified":1473653656370,"shasum":"7b11c0d5fad29f5564e6f638a733ae8abe172d4c"},{"_id":"public/2016/09/06/hello-world/index.html","modified":1473653656412,"shasum":"c1bab191ebc7ad96a9ed5243aa5e08acad588b70"},{"_id":"public/2016/07/20/vim-search-and-replace/index.html","modified":1473653656438,"shasum":"ed76a1b27f625365c2e60ae1fabcf65f639573ac"},{"_id":"public/2016/07/11/KMP/index.html","modified":1473653656480,"shasum":"970e9549dc4aac057a6d8b8f9034ed23e7dbd4b9"},{"_id":"public/2016/07/06/micarray/index.html","modified":1473653656500,"shasum":"5e3b089f90cf0331b076079530692414bb46c723"},{"_id":"public/2016/07/01/bandwidthforinteldevice/index.html","modified":1473653656513,"shasum":"a096900a8de04919c77cc002366a026bab839695"},{"_id":"public/2015/12/13/gccinstall/index.html","modified":1473653656531,"shasum":"e3ca0ea81c34466d6953e8f55ce2d535f2eb501b"},{"_id":"public/archives/index.html","modified":1473653656560,"shasum":"ffae6cadacdc0b7ec72327d1f298a2841291a9c0"},{"_id":"public/archives/2015/index.html","modified":1473653656565,"shasum":"ef4b51493598999a9eae3fd891eabe7514f39b24"},{"_id":"public/archives/2015/12/index.html","modified":1473653656570,"shasum":"76ba8e879c28fa19b0525da8a5df38c7a351526e"},{"_id":"public/archives/2016/index.html","modified":1473653656577,"shasum":"d97025992a1a4a4f435f86a15b5acccfbb77c74e"},{"_id":"public/archives/2016/07/index.html","modified":1473653656588,"shasum":"ea42aa5262b2266387a4aaa0bc02ada6f2bed523"},{"_id":"public/archives/2016/09/index.html","modified":1473653656597,"shasum":"457924fbb22e86f24568f1084d0641068ee30ee6"},{"_id":"public/categories/Linux/index.html","modified":1473653656601,"shasum":"bc7086d04d175b473131d1812c5dd75d1cca5b04"},{"_id":"public/categories/MIC-GPU/index.html","modified":1473653656605,"shasum":"47e09fa1d8d0a064a49f418b71fafbe7ca03b634"},{"_id":"public/categories/hexo/index.html","modified":1473653656608,"shasum":"91f17e5e754ff1c4c71e58bf29c270bfb26d42e6"},{"_id":"public/categories/C-C/index.html","modified":1473653656611,"shasum":"aaa634d364aabc27d5bf5469950b5d54dd3c8387"},{"_id":"public/categories/algorithms/index.html","modified":1473653656616,"shasum":"5d0a9e8b9c7d17fd60b383bb407b1bc9387791e5"},{"_id":"public/index.html","modified":1473653656625,"shasum":"2af50ec0309831b2f64ac8af332af4fd5a7346f8"},{"_id":"public/tags/vim/index.html","modified":1473653656629,"shasum":"d7f5e6d56912c829c54da048861b8136f804fc86"},{"_id":"public/tags/Intel-Xeon-Phi-MIC/index.html","modified":1473653656635,"shasum":"27488a6256105ab631e2c60b756ade07efce1951"},{"_id":"public/tags/hexo/index.html","modified":1473653656639,"shasum":"b67b7a66bf4f2303b84e4119a96a3aea19f3003e"},{"_id":"public/tags/C-C/index.html","modified":1473653656643,"shasum":"97bda119d13379c8e3957ecdc54f70ec0d3ec544"},{"_id":"public/tags/algorithms/index.html","modified":1473653656647,"shasum":"6666e0013e29a0c941f4b6f5118bf31781d2da7b"}],"Category":[{"name":"Linux","_id":"ciszjc4zi0002bgs690mmatu0"},{"name":"MIC/GPU","_id":"ciszjc4zo0007bgs6j9drc6ht"},{"name":"hexo","_id":"ciszjc4zr000cbgs6wok4h29i"},{"name":"C/C++","_id":"ciszjc4zu000hbgs6i8w6e2kx"},{"name":"algorithms","_id":"ciszjc50a000pbgs69n37z13i"}],"Data":[],"Page":[{"_content":"<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://xukai.xyz\" homePageName=\"回到我的主页\"></script>\n","source":"404.html","raw":"<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://xukai.xyz\" homePageName=\"回到我的主页\"></script>\n","date":"2016-09-05T16:18:20.985Z","updated":"2015-12-01T01:35:25.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ciszjc4yv0000bgs6zebmov4u"}],"Post":[{"title":"vim -- 查找和替换","date":"2016-07-20T04:01:47.000Z","_content":"### **基本操作**\n **%s/foo/bar/g**\n\n在所有行中寻找‘foo’，并且用‘bar’替换\n\n**:s/foo/bar/g**\n\n在当前行寻找‘foo’，并且用‘foo’替换\n\n**:%s/foo/bar/gc**\n\n将每一个‘foo'，并用’bar‘替换，但是替换时询问\n\n**%s/\\\\&lt;foo\\\\>/bar/gc**\n\n查找单词完全匹配’foo‘替换成bar，但是替换时询问\n\n\n**:%s/foo/bar/gci**\n\n查找’foo‘并且替换成'bar'但是大小写不敏感，替换时询问,\n\n**:%s/foo\\c/bar/gc**是与上一个相同，因为\\c是大小写不敏感的\n\n使用:set noingorecase查找时就是大小写敏感的\n\n**:%s/foo/bar/gcI** \n\n将每一个’foo‘替换成’bar‘，大小写敏感，替换时询问\n\n**:%s/foo\\C/bar/gc**与上一条相同\n\n使用:set ignorecase查找时不是大小写敏感的\n\ng表示global(全局的) - 每一行出现的都被改变，不仅是每一行的第一个\n\n这样做的假设是默认’gdefault‘ 和 ’edcompatible‘ 是关的，所以需要:%s///g使用全局替换\n\n使用:set gdefault时，:%s///是使用全局替换，而:%s///g不是\n\n使用g选项主要是相反的意思\n\n使用c选项时，对每个替换操作需要确认。Vim可能会输出replace with foobar (y/n/a/q/l/^E/^Y)?， 这里foobar是:%s/.../...，你可以使用y进行替换，n跳过这个替换，a对当前及以后所有进行替换操作（a是 all remaining matches），q是退出这个操作，l是对当前进行替换操作，然后退出操作，（l是last），^E是指按下Ctrl + E滚到上一屏，^Y是指Ctrl + Y滚到下一屏，然而最后两个选项是可选的。\n\n还在使用c标志,Vim会跳到它从顶部查找到的第一个匹配项，提示你确认对匹配执行替换。Vim IncSearch突出匹配的文本给你一个视觉提示在对哪个匹配进行操作。\n\n\n### **查找范围**\n\n**:s/foo/bar**\n\n 将当前行’foo‘全部替换为‘bar’\n \n**:%s/foo/bar/g **\n\n将所有行的’foo‘全部替换为’bar‘\n\n**:5,12s/foo/bar/g** \n\n将5-12行（包括5行和12行）中的’foo'全部替换为‘bar’\n\n**:'a,'bs/foo/bar/g** \n\n从标记a到标记b所有行中的‘foo’替换为‘bar’\n\n**:'&lt;,'>s/foo/bar/g** 当使用 +visual时，在visual选中的区域。Vim会自动加入 \\( '&lt;, '>\\)当你选中一片区域，并且按下:时。\n\n**:.,$s/foo/bar/g**\n\n 从当前行(.)到最后一行($)将’foo‘替换成’bar‘\n\n**:.,+2s/foo/bar/g **\n\n从当前行(.)到下两行将’foo‘替换成’bar‘\n\n**:g/^baz/s/foo/bar/g**\n\n  以’baz‘开头的所有行中的’foo‘替换成’bar'\n\n注意：在vim7.3中，应用到标记或是在visual模式下的选择(使用标记 '&lt; and '>)的查找和替换范围，不包括列的位置，默认应用到每一行，除非使用\\\\%V标记，如:**'&lt;,'>s/\\\\%Vfoo/bar/g**.\n\n\n### **特殊字符**\n使用查找时：\n\n., \\*, \\\\, \\[, ^, 和 $ 是元字符\n\n\\+, ?, |, &, \\{, \\(, and \\) 必须不用特殊函数\n\n\\\\/ 是 /\\(用反斜杠 + 斜杠查找斜杠\\)\n\n\\\\t 是tab，\\\\s是空格\n\n\\\\n 是新的一行，\\\\r是CR\\(回车符 = Ctrl + M = ^M\\)\n\n\\[\\]在中括号之间的内容表示要查找内容的一个集合，字符的范围可以用一个 \\-，比如，要查找一个字符a，b，c, 或者是数字1,可以使用\\[1a-c\\]表示，\\^表示取反，例如\\[^1a-c\\]表示匹配除1, a，b，c以外的所有字符\n\\{ \\# \\}表示重复，比如/foo.\\\\\\{2\\\\\\} 会匹配foo和紧跟着的两个字符，\\\\没有必要，/foo.\\{2\\}会有相同的结果\n\n\\\\\\(foo\\\\\\) 对‘foo’制造了一个回溯引用，括号没有\\表示匹配，所以\\在这里是必须的\n\n使用替换时：\n\n\\\\r表示新的一行，\\\\n表示没有字符\n\n\\\\&代表搜索的匹配模式\n\n\\\\0插入匹配到的整个文本\n\n\\\\1插入第一个回溯引用，\\\\2表示插入第二个回溯引用\n\n也可以使用其他的分割符来进行查找，例如使用#\n\n**:s\\#http: //www.example.com/index.html\\#http: //example.com/#**\n\n 使用\\zs和\\ze来指定替换的开始和结束，比如\n\n**:s/Copyright 2007 All Rights Reserved/Copyright 2008 All Rights Reserved/**\n\n可以用\n\n**:s/Copyright \\\\zs2007\\\\ze All Rights Reserved/2008/**\n\n\n### **使用当前的word或是寄存器**\n\n**:%s//bar/g**\n\n用‘bar’替换上一个匹配的模式\n\n**:%s/foo/ &lt;c-r> &lt;c-w>/g**\n\n用光标下的单词替换foo\n&lt;c-r>&lt;c-w> 是指当按下 Ctrl-R 和 Ctrl-W. 光标下的单词会输入到你准备替换的地方\n\n**:%s/foo/&lt;c-r>&lt;c-a>/g**\n将每一个 'foo'替换为光标下的单词（用空格作为分界）\n&lt;c-r>&lt;c-a> 是指按下 Ctrl-R 和 Ctrl-A.\n\n**:%s/foo/&lt;c-r>a/g**\n\n将每一个 'foo'替换为寄存器'a'中的内容\nReplace each occurrence of 'foo' with the contents of register 'a'.\n&lt;c-r>是指按下 Ctrl-R 和 a.\n寄存器'a'中的内容会输入的替换的位置\n\n**:%s/foo/&lt;c-r>0/g**\n\n和上面的含义相同，使用寄存器 0 中的内容作为替换文本\n\n**:%s/foo/\\=@a/g**\n\n将每一个 'foo'替换为寄存器'a'中的内容\n\\=@a 寄存器 'a'的引用\n寄存器'a'中的内容不会在命令行中显示，对多行文本很有用\n\n**:%s/&lt;c-r>*/bar/g**\n\n将在系统剪贴板( * 寄存器)中内容的内容替换成bar\n\n:**%s/&lt;c-r>a/bar/g**\n\n将在文本中出现的寄存器'a'中的内容替换为'bar'\n寄存器中的换行被表示成 ^M\n\n### **示例**\n\n**:%s/foo/bar/**\n\n将每一行第一次出现的‘foo’用‘bar’替换\n\n**:%s/.*\\zsfoo/bar/**\n\n 将每一行最后一次出现的'foo'用‘bar’替换\n\n**%s/ \\\\&lt;foo\\\\>/bar/gc**\n\n对每一行，删除所有出现的‘foo’\n**:%s/\\\\&lt;foo\\\\>.*//**\n\n将每一行出现的‘foo’以及这一行之后的所有文本删除\n\n**:%s/\\\\&lt;foo\\\\>.\\\\{5\\\\}//**\n\n将每一行出现的‘foo’以及之后的5个字符删除\n\n**:%s/\\\\&lt;foo\\\\>\\zs.\\*//**\n\n将每一行出现在‘foo’之后的文本删除\n\n**:%s/.\\*\\\\&lt;foo\\\\>//**\n\n将每一行中的‘foo’和它之前的文本删除\n\n**:%s/.\\*\\\\ze\\\\&lt;foo\\\\>//**\n\n将每一行出现在‘foo’之前的文本删除\n\n**:%s/.\\* \\\\\\(\\\\&lt;foo\\\\>\\\\).\\*/\\\\1/**\n\n将每一行‘foo'之前的文本和之后的文本删除\n\n**:s/^\\\\\\(\\\\w\\\\\\)/\\\\u\\1/**\n\n将当前行的第一个字符改成大写\n\n**:%s/\\\\\\(.\\*\\\\n\\\\\\)\\\\{5\\\\}/&\\\\r/**\n\n每5行插入一个空白行\n\n将\\(.*\\n\\)(任意一行)重复5次(\\{5\\})\n\n替换成&(匹配到的文本，就是5行内容)，后面加上新的一行(\\r)\n\n\n[更好的学习资料](http://vim.wikia.com/wiki/Search_and_replace)\n","source":"_posts/vim-search-and-replace.md","raw":"title: vim -- 查找和替换\ndate: 2016-07-20 12:01:47\ntags: vim\ncategories: Linux\n---\n### **基本操作**\n **%s/foo/bar/g**\n\n在所有行中寻找‘foo’，并且用‘bar’替换\n\n**:s/foo/bar/g**\n\n在当前行寻找‘foo’，并且用‘foo’替换\n\n**:%s/foo/bar/gc**\n\n将每一个‘foo'，并用’bar‘替换，但是替换时询问\n\n**%s/\\\\&lt;foo\\\\>/bar/gc**\n\n查找单词完全匹配’foo‘替换成bar，但是替换时询问\n\n\n**:%s/foo/bar/gci**\n\n查找’foo‘并且替换成'bar'但是大小写不敏感，替换时询问,\n\n**:%s/foo\\c/bar/gc**是与上一个相同，因为\\c是大小写不敏感的\n\n使用:set noingorecase查找时就是大小写敏感的\n\n**:%s/foo/bar/gcI** \n\n将每一个’foo‘替换成’bar‘，大小写敏感，替换时询问\n\n**:%s/foo\\C/bar/gc**与上一条相同\n\n使用:set ignorecase查找时不是大小写敏感的\n\ng表示global(全局的) - 每一行出现的都被改变，不仅是每一行的第一个\n\n这样做的假设是默认’gdefault‘ 和 ’edcompatible‘ 是关的，所以需要:%s///g使用全局替换\n\n使用:set gdefault时，:%s///是使用全局替换，而:%s///g不是\n\n使用g选项主要是相反的意思\n\n使用c选项时，对每个替换操作需要确认。Vim可能会输出replace with foobar (y/n/a/q/l/^E/^Y)?， 这里foobar是:%s/.../...，你可以使用y进行替换，n跳过这个替换，a对当前及以后所有进行替换操作（a是 all remaining matches），q是退出这个操作，l是对当前进行替换操作，然后退出操作，（l是last），^E是指按下Ctrl + E滚到上一屏，^Y是指Ctrl + Y滚到下一屏，然而最后两个选项是可选的。\n\n还在使用c标志,Vim会跳到它从顶部查找到的第一个匹配项，提示你确认对匹配执行替换。Vim IncSearch突出匹配的文本给你一个视觉提示在对哪个匹配进行操作。\n\n\n### **查找范围**\n\n**:s/foo/bar**\n\n 将当前行’foo‘全部替换为‘bar’\n \n**:%s/foo/bar/g **\n\n将所有行的’foo‘全部替换为’bar‘\n\n**:5,12s/foo/bar/g** \n\n将5-12行（包括5行和12行）中的’foo'全部替换为‘bar’\n\n**:'a,'bs/foo/bar/g** \n\n从标记a到标记b所有行中的‘foo’替换为‘bar’\n\n**:'&lt;,'>s/foo/bar/g** 当使用 +visual时，在visual选中的区域。Vim会自动加入 \\( '&lt;, '>\\)当你选中一片区域，并且按下:时。\n\n**:.,$s/foo/bar/g**\n\n 从当前行(.)到最后一行($)将’foo‘替换成’bar‘\n\n**:.,+2s/foo/bar/g **\n\n从当前行(.)到下两行将’foo‘替换成’bar‘\n\n**:g/^baz/s/foo/bar/g**\n\n  以’baz‘开头的所有行中的’foo‘替换成’bar'\n\n注意：在vim7.3中，应用到标记或是在visual模式下的选择(使用标记 '&lt; and '>)的查找和替换范围，不包括列的位置，默认应用到每一行，除非使用\\\\%V标记，如:**'&lt;,'>s/\\\\%Vfoo/bar/g**.\n\n\n### **特殊字符**\n使用查找时：\n\n., \\*, \\\\, \\[, ^, 和 $ 是元字符\n\n\\+, ?, |, &, \\{, \\(, and \\) 必须不用特殊函数\n\n\\\\/ 是 /\\(用反斜杠 + 斜杠查找斜杠\\)\n\n\\\\t 是tab，\\\\s是空格\n\n\\\\n 是新的一行，\\\\r是CR\\(回车符 = Ctrl + M = ^M\\)\n\n\\[\\]在中括号之间的内容表示要查找内容的一个集合，字符的范围可以用一个 \\-，比如，要查找一个字符a，b，c, 或者是数字1,可以使用\\[1a-c\\]表示，\\^表示取反，例如\\[^1a-c\\]表示匹配除1, a，b，c以外的所有字符\n\\{ \\# \\}表示重复，比如/foo.\\\\\\{2\\\\\\} 会匹配foo和紧跟着的两个字符，\\\\没有必要，/foo.\\{2\\}会有相同的结果\n\n\\\\\\(foo\\\\\\) 对‘foo’制造了一个回溯引用，括号没有\\表示匹配，所以\\在这里是必须的\n\n使用替换时：\n\n\\\\r表示新的一行，\\\\n表示没有字符\n\n\\\\&代表搜索的匹配模式\n\n\\\\0插入匹配到的整个文本\n\n\\\\1插入第一个回溯引用，\\\\2表示插入第二个回溯引用\n\n也可以使用其他的分割符来进行查找，例如使用#\n\n**:s\\#http: //www.example.com/index.html\\#http: //example.com/#**\n\n 使用\\zs和\\ze来指定替换的开始和结束，比如\n\n**:s/Copyright 2007 All Rights Reserved/Copyright 2008 All Rights Reserved/**\n\n可以用\n\n**:s/Copyright \\\\zs2007\\\\ze All Rights Reserved/2008/**\n\n\n### **使用当前的word或是寄存器**\n\n**:%s//bar/g**\n\n用‘bar’替换上一个匹配的模式\n\n**:%s/foo/ &lt;c-r> &lt;c-w>/g**\n\n用光标下的单词替换foo\n&lt;c-r>&lt;c-w> 是指当按下 Ctrl-R 和 Ctrl-W. 光标下的单词会输入到你准备替换的地方\n\n**:%s/foo/&lt;c-r>&lt;c-a>/g**\n将每一个 'foo'替换为光标下的单词（用空格作为分界）\n&lt;c-r>&lt;c-a> 是指按下 Ctrl-R 和 Ctrl-A.\n\n**:%s/foo/&lt;c-r>a/g**\n\n将每一个 'foo'替换为寄存器'a'中的内容\nReplace each occurrence of 'foo' with the contents of register 'a'.\n&lt;c-r>是指按下 Ctrl-R 和 a.\n寄存器'a'中的内容会输入的替换的位置\n\n**:%s/foo/&lt;c-r>0/g**\n\n和上面的含义相同，使用寄存器 0 中的内容作为替换文本\n\n**:%s/foo/\\=@a/g**\n\n将每一个 'foo'替换为寄存器'a'中的内容\n\\=@a 寄存器 'a'的引用\n寄存器'a'中的内容不会在命令行中显示，对多行文本很有用\n\n**:%s/&lt;c-r>*/bar/g**\n\n将在系统剪贴板( * 寄存器)中内容的内容替换成bar\n\n:**%s/&lt;c-r>a/bar/g**\n\n将在文本中出现的寄存器'a'中的内容替换为'bar'\n寄存器中的换行被表示成 ^M\n\n### **示例**\n\n**:%s/foo/bar/**\n\n将每一行第一次出现的‘foo’用‘bar’替换\n\n**:%s/.*\\zsfoo/bar/**\n\n 将每一行最后一次出现的'foo'用‘bar’替换\n\n**%s/ \\\\&lt;foo\\\\>/bar/gc**\n\n对每一行，删除所有出现的‘foo’\n**:%s/\\\\&lt;foo\\\\>.*//**\n\n将每一行出现的‘foo’以及这一行之后的所有文本删除\n\n**:%s/\\\\&lt;foo\\\\>.\\\\{5\\\\}//**\n\n将每一行出现的‘foo’以及之后的5个字符删除\n\n**:%s/\\\\&lt;foo\\\\>\\zs.\\*//**\n\n将每一行出现在‘foo’之后的文本删除\n\n**:%s/.\\*\\\\&lt;foo\\\\>//**\n\n将每一行中的‘foo’和它之前的文本删除\n\n**:%s/.\\*\\\\ze\\\\&lt;foo\\\\>//**\n\n将每一行出现在‘foo’之前的文本删除\n\n**:%s/.\\* \\\\\\(\\\\&lt;foo\\\\>\\\\).\\*/\\\\1/**\n\n将每一行‘foo'之前的文本和之后的文本删除\n\n**:s/^\\\\\\(\\\\w\\\\\\)/\\\\u\\1/**\n\n将当前行的第一个字符改成大写\n\n**:%s/\\\\\\(.\\*\\\\n\\\\\\)\\\\{5\\\\}/&\\\\r/**\n\n每5行插入一个空白行\n\n将\\(.*\\n\\)(任意一行)重复5次(\\{5\\})\n\n替换成&(匹配到的文本，就是5行内容)，后面加上新的一行(\\r)\n\n\n[更好的学习资料](http://vim.wikia.com/wiki/Search_and_replace)\n","slug":"vim-search-and-replace","published":1,"updated":"2016-07-20T08:30:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciszjc4ze0001bgs6n4r7birx"},{"title":"MIC中部分数组的分配以及数组之间的传输","date":"2016-07-06T05:03:21.000Z","_content":"编写MIC程序时使用offload模式时，经常需要在CPU端和MIC端传输数据，但是有时并不需要将CPU端的整个数组上传到MIC，只需要上传一部分，并且上传的起始地址并不是数组的起始地址，而有时需要将CPU端的a数组上传到b数组，其实Intel提供了这两种上传方式的方法。\n#### **MIC中部分数组的分配**\n在MIC端只分配数组的一部分，可以看下面的示例。\n```\n#include <stdio.h>\n#include <stdlib.h>\nint main(){\n\tint *a = (int*)malloc(200 * sizeof(int));\n\ta[10] = 10;\n\tprintf(\"CPU: a[10] = %d\\n\", a[10]);\n\t#pragma offload targe(mic:0)\\\n\t\tin(a[10:100] : alloc(a[5:150]))\n\t\t{\n\t\t\tprintf(\"MIC: a[10] = %d\\n\", a[10]);\n\t\t}\n\treturn 0;\n}\n```\na[10:100] 是指CPU端的数组自下标10起的100个元素，即10~109上传到MIC。\nalloc(a[5:150])是指在MIC端分配150个元素，但是起始下标是5，即150个元素为5~154。\n需要注意的一点是从CPU端上传到MIC端的元素范围必须在MIC端分配的范围之内即5~104之间，若上传a[0:100]或者是a[5:180]均会出现越界的情况。\n#### **MIC数组之间的传输**\nMIC之间数组之间的传输，可以看下面的示例。\n```\n#include <stdio.h>\n#include <stdlib.h>\nint main(){\n\tint *a = (int*)malloc(1000 * sizeof(int));\n\tint *b;\n\ta[100] = 100;\n\tprintf(\"CPU: a[100] = %d\\n\", a[100]);\n\t#pragma offload target(mic:0))\\\n\t\tin(a[0:500]:into(b[400:500])\n\t\t{\n\t\t\tprintf(\"MIC: b[500] = %d\\n\", b[500]);\n\t\t}\n\treturn 0;\n}\n```\n上面的示例程序是指将a数组中下标为0~499的500个元素上传到MIC端b数组中，元素在数组b中的下标范围为400~899。\n\n 上面的操作可以减少MIC端数组分配，减少内存使用，再结合alloc\\_if 和 free\\_if 就可以完成提高数据传输的效率了。\n","source":"_posts/micarray.md","raw":"title: MIC中部分数组的分配以及数组之间的传输\ndate: 2016-07-06 13:03:21\ntags: Intel Xeon Phi/MIC\ncategories: MIC/GPU\n---\n编写MIC程序时使用offload模式时，经常需要在CPU端和MIC端传输数据，但是有时并不需要将CPU端的整个数组上传到MIC，只需要上传一部分，并且上传的起始地址并不是数组的起始地址，而有时需要将CPU端的a数组上传到b数组，其实Intel提供了这两种上传方式的方法。\n#### **MIC中部分数组的分配**\n在MIC端只分配数组的一部分，可以看下面的示例。\n```\n#include <stdio.h>\n#include <stdlib.h>\nint main(){\n\tint *a = (int*)malloc(200 * sizeof(int));\n\ta[10] = 10;\n\tprintf(\"CPU: a[10] = %d\\n\", a[10]);\n\t#pragma offload targe(mic:0)\\\n\t\tin(a[10:100] : alloc(a[5:150]))\n\t\t{\n\t\t\tprintf(\"MIC: a[10] = %d\\n\", a[10]);\n\t\t}\n\treturn 0;\n}\n```\na[10:100] 是指CPU端的数组自下标10起的100个元素，即10~109上传到MIC。\nalloc(a[5:150])是指在MIC端分配150个元素，但是起始下标是5，即150个元素为5~154。\n需要注意的一点是从CPU端上传到MIC端的元素范围必须在MIC端分配的范围之内即5~104之间，若上传a[0:100]或者是a[5:180]均会出现越界的情况。\n#### **MIC数组之间的传输**\nMIC之间数组之间的传输，可以看下面的示例。\n```\n#include <stdio.h>\n#include <stdlib.h>\nint main(){\n\tint *a = (int*)malloc(1000 * sizeof(int));\n\tint *b;\n\ta[100] = 100;\n\tprintf(\"CPU: a[100] = %d\\n\", a[100]);\n\t#pragma offload target(mic:0))\\\n\t\tin(a[0:500]:into(b[400:500])\n\t\t{\n\t\t\tprintf(\"MIC: b[500] = %d\\n\", b[500]);\n\t\t}\n\treturn 0;\n}\n```\n上面的示例程序是指将a数组中下标为0~499的500个元素上传到MIC端b数组中，元素在数组b中的下标范围为400~899。\n\n 上面的操作可以减少MIC端数组分配，减少内存使用，再结合alloc\\_if 和 free\\_if 就可以完成提高数据传输的效率了。\n","slug":"micarray","published":1,"updated":"2016-07-06T05:19:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciszjc4zn0006bgs6lyezbvg6"},{"title":"Hello World","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"title: Hello World\ntags: hexo\ncategories: hexo\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-09-05T16:18:21.032Z","updated":"2015-11-29T06:59:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciszjc4zp000bbgs6qwhmrkfu"},{"title":"编译安装GCC 5.2.0","date":"2015-12-13T10:28:28.000Z","_content":"记录编译GCC 5.2.0时遇到的问题和解决方法，以备日后查询。\n\n使用的服务器是CentOS6，自带的gcc编译器4.4.2版本，要是完全支持c++11需要4.8版本以上的，完全没法写C++11的代码，因为不能升级操作系统也没有root权限，只能自己下载源码编译。\n\n安装过程只好记录下来。\n\n### 安装依赖库\nGCC依赖于gmp 4.2+, mpfr 2.4+和mpc 0.8+，这里直接下载安装最新的版本。\n\n我将依赖库装在/home/users/xk/gcc-5.2目录下\n\n\n#### 安装gmp 6.0\nwget https://gmplib.org/download/gmp/gmp-6.0.0a.tar.bz2\ntar xvf gmp-6.0.0a.tar.bz2\ncd gmp-6.0.0\n./configure --prefix=/home/users/xk/gcc-5.2\nmake -j4\nmake check\nmake install\n\n#### 安装mpfr 3.1.3\nmpfr依赖于gmp。\n\nwget http://www.mpfr.org/mpfr-current/mpfr-3.1.3.tar.bz2\ntar xvf mpfr-3.1.3.tar.bz2\ncd mpfr-3.1.3\n./configure --prefix==/home/users/xk/gcc-5.2 \\\n\t--with-gmp-include=/home/users/xk/gcc-5.2/include \\\n\t--with-gmp-lib=/home/users/xk/gcc-5.2/lib\nmake -j4\nmake check\nmake install\n\n#### 安装mpc 1.0.3\nmpc依赖于gmp和mpfr。\nwget ftp://ftp.gnu.org/gnu/mpc/mpc-1.0.3.tar.gz\ntar xvf mpc-1.0.3.tar.gz\ncd mpc-1.0.3\n./configure --prefix==/home/users/xk/gcc-5.2 \\\n--with-gmp-include=/home/users/xk/gcc-5.2/include \\\n--with-gmp-lib=/home/users/xk/gcc-5.2/lib \\\n--with-mpfr-include=/home/users/xk/gcc-5.2/include \\\n--with-mpfr-lib=/home/users/xk/gcc-5.2/lib \nmake -j4\nmake check\nmake install\n\n\n\n### 编译和安装GCC\n\n建议先阅读下官方的安装文档。\n\n#### 下载GCC并解压。\n\nwget ftp://ftp.gnu.org/gnu/gcc/gcc-5.2.0/gcc-5.2.0.tar.bz2\ntar xvf gcc-5.2.0.tar.bz2\ncd gcc-5.2.0\n\n在/home/users/xk/编辑 .bashrc, 添加LD_LIBRARY_APTH=/home/users/xk/gcc-5.2/lib\n\n#### 配置GCC\n\n./configure \\\n\t--prefix=--with-gmp-include=/home/users/xk/ \\\n\t--with-gmp-include=/home/users/xk/gcc-5.2/include \\\n\t--with-gmp-lib=/home/users/xk/gcc-5.2/lib \\\n\t--with-mpfr-include=/home/users/xk/gcc-5.2/include \\\n\t--with-mpfr-lib=/home/users/xk/gcc-5.2/lib \\\n\t--with-mpc-include=/home/users/xk/gcc-5.2/include \\\n\t--with-mpc-lib=/home/users/xk/gcc-5.2/lib \\\n\t--enable-languages=c,c++ \\\n\t--enable-threads=posix \\\n\t--disable-multilib\n\t\n详细的配置项说明可参考安装文档，这里只编译c和c++的编译器。\n\n#### 编译GCC\n后运行如下命令:\n\nmake -j8\n\n#### 安装GCC\n如果编译顺利通过，make install即可。\n\ngcc和g++被安装到/home/users/xk/bin目录下，libgcc和libstdc++被安装到/home/users/xk/lib64(x64)。\n\n#### 配置 .bashrc\n\nvim ~/.bashrc\n\nexport LD_LIBRARY_PATH=/home/users/xk/gcc-5.2/lib:/home/users/xk/lib:/home/users/xk/lib64\nexport CPLUS_INCLUDE_PATH=/home/users/xk/include:/home/users/xk/boost-1-58/include\nexport GXX_ROOT=/home/users/xk/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/\nexport C_INCLUDE_PATH=/home/users/xk/include:/home/users/xk/boost-1-58/include\n\nsource ~/.bashrc\n\n### 测试\n写一个简单的cc测试下新安装的编译器。\n``` c++\n#include <atomic>\n#include <regex>\n#include <iostream>\nusing namespace std;\n\nint main() {\n    atomic<long long> num(1L << 14);\n    cout << ++num << endl;\n\n    regex r(\"[0-9]+\");\n    string s(\"0abc11abc222cba\");\n    sregex_iterator ib(s.begin(), s.end(), r);\n    sregex_iterator ie;\n    cout << \"search numbers in: \" << s << endl;\n    for (sregex_iterator i = ib; i != ie; ++i) {\n        cout << \"match: \" << i->str() << endl;\n    }\n}\n```\n编译并运行:\n\ng++ -std=c++11 test.cc -o test\n./test\n\n","source":"_posts/gccinstall.md","raw":"title: 编译安装GCC 5.2.0\ndate: 2015-12-13 18:28:28\ntags: C/C++\ncategories: C/C++\n---\n记录编译GCC 5.2.0时遇到的问题和解决方法，以备日后查询。\n\n使用的服务器是CentOS6，自带的gcc编译器4.4.2版本，要是完全支持c++11需要4.8版本以上的，完全没法写C++11的代码，因为不能升级操作系统也没有root权限，只能自己下载源码编译。\n\n安装过程只好记录下来。\n\n### 安装依赖库\nGCC依赖于gmp 4.2+, mpfr 2.4+和mpc 0.8+，这里直接下载安装最新的版本。\n\n我将依赖库装在/home/users/xk/gcc-5.2目录下\n\n\n#### 安装gmp 6.0\nwget https://gmplib.org/download/gmp/gmp-6.0.0a.tar.bz2\ntar xvf gmp-6.0.0a.tar.bz2\ncd gmp-6.0.0\n./configure --prefix=/home/users/xk/gcc-5.2\nmake -j4\nmake check\nmake install\n\n#### 安装mpfr 3.1.3\nmpfr依赖于gmp。\n\nwget http://www.mpfr.org/mpfr-current/mpfr-3.1.3.tar.bz2\ntar xvf mpfr-3.1.3.tar.bz2\ncd mpfr-3.1.3\n./configure --prefix==/home/users/xk/gcc-5.2 \\\n\t--with-gmp-include=/home/users/xk/gcc-5.2/include \\\n\t--with-gmp-lib=/home/users/xk/gcc-5.2/lib\nmake -j4\nmake check\nmake install\n\n#### 安装mpc 1.0.3\nmpc依赖于gmp和mpfr。\nwget ftp://ftp.gnu.org/gnu/mpc/mpc-1.0.3.tar.gz\ntar xvf mpc-1.0.3.tar.gz\ncd mpc-1.0.3\n./configure --prefix==/home/users/xk/gcc-5.2 \\\n--with-gmp-include=/home/users/xk/gcc-5.2/include \\\n--with-gmp-lib=/home/users/xk/gcc-5.2/lib \\\n--with-mpfr-include=/home/users/xk/gcc-5.2/include \\\n--with-mpfr-lib=/home/users/xk/gcc-5.2/lib \nmake -j4\nmake check\nmake install\n\n\n\n### 编译和安装GCC\n\n建议先阅读下官方的安装文档。\n\n#### 下载GCC并解压。\n\nwget ftp://ftp.gnu.org/gnu/gcc/gcc-5.2.0/gcc-5.2.0.tar.bz2\ntar xvf gcc-5.2.0.tar.bz2\ncd gcc-5.2.0\n\n在/home/users/xk/编辑 .bashrc, 添加LD_LIBRARY_APTH=/home/users/xk/gcc-5.2/lib\n\n#### 配置GCC\n\n./configure \\\n\t--prefix=--with-gmp-include=/home/users/xk/ \\\n\t--with-gmp-include=/home/users/xk/gcc-5.2/include \\\n\t--with-gmp-lib=/home/users/xk/gcc-5.2/lib \\\n\t--with-mpfr-include=/home/users/xk/gcc-5.2/include \\\n\t--with-mpfr-lib=/home/users/xk/gcc-5.2/lib \\\n\t--with-mpc-include=/home/users/xk/gcc-5.2/include \\\n\t--with-mpc-lib=/home/users/xk/gcc-5.2/lib \\\n\t--enable-languages=c,c++ \\\n\t--enable-threads=posix \\\n\t--disable-multilib\n\t\n详细的配置项说明可参考安装文档，这里只编译c和c++的编译器。\n\n#### 编译GCC\n后运行如下命令:\n\nmake -j8\n\n#### 安装GCC\n如果编译顺利通过，make install即可。\n\ngcc和g++被安装到/home/users/xk/bin目录下，libgcc和libstdc++被安装到/home/users/xk/lib64(x64)。\n\n#### 配置 .bashrc\n\nvim ~/.bashrc\n\nexport LD_LIBRARY_PATH=/home/users/xk/gcc-5.2/lib:/home/users/xk/lib:/home/users/xk/lib64\nexport CPLUS_INCLUDE_PATH=/home/users/xk/include:/home/users/xk/boost-1-58/include\nexport GXX_ROOT=/home/users/xk/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/\nexport C_INCLUDE_PATH=/home/users/xk/include:/home/users/xk/boost-1-58/include\n\nsource ~/.bashrc\n\n### 测试\n写一个简单的cc测试下新安装的编译器。\n``` c++\n#include <atomic>\n#include <regex>\n#include <iostream>\nusing namespace std;\n\nint main() {\n    atomic<long long> num(1L << 14);\n    cout << ++num << endl;\n\n    regex r(\"[0-9]+\");\n    string s(\"0abc11abc222cba\");\n    sregex_iterator ib(s.begin(), s.end(), r);\n    sregex_iterator ie;\n    cout << \"search numbers in: \" << s << endl;\n    for (sregex_iterator i = ib; i != ie; ++i) {\n        cout << \"match: \" << i->str() << endl;\n    }\n}\n```\n编译并运行:\n\ng++ -std=c++11 test.cc -o test\n./test\n\n","slug":"gccinstall","published":1,"updated":"2015-12-13T11:01:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciszjc4zu000gbgs6vv1oocrq"},{"title":"Intel Xeon Phi的内存带宽","date":"2016-07-01T15:12:35.000Z","_content":"\n这篇文章翻译自[这里](http://clusterdesign.org/2013/02/memory-bandwidth-for-intel-xeon-phi-and-friends/)\n\nJohn D. McCalpin博士，非正式地称为“带宽博士“， 因为他发明了STREAM memory bandwidth benchmark，使用dell生产的Xeon phi和两个Xeon的服务器，三个设备使用的是在TACC的Stampede电脑。\n### Intel设备的总带宽\nIntel Xeon Phi实现的内存带宽大致161829 MB/s- 出现在图上的是使用2xCPU和4X CPU 基于Intel Xeon作为计算节点的的服务器。首先，每个设备总内存带宽：每个Xeon phi，或每个基于Xeon的服务器。\n![Memory bandwidth per device, MBytes/sec](bandwidth1.png)\n### Intel设备每个线程的带宽\n在试验中，STREAM使用的OpenMP线程数等于计算设备上的核心数。可以看出，英特尔至强融核主板提供了大量的带宽给它的核心。高端双路和四路服务器在总带宽上落后，四插槽服务器仅比其双插槽服务器略好。\n现在用总带宽除以计算设备上运行的线程数，可以得出一个线程可以多少使用的带宽：\n![Memory bandwidth per thread, MBytes/sec](bwperthread.png)\n为了充分利用Intel Xeon Phi浮点计算能力，需要每个内核启动4线程。下面是引用英特尔的James Reinders的一句话：\n*The Intel Xeon Phi coprocessor offers four hardware threads per core with sufficient memory capabilities and floating-point capabilities to make it generally impossible for a single thread per core to approach either limit. Highly tuned kernels of code may reach saturation with two threads, but generally applications need a minimum of three or four active threads per core to access all that the coprocessor can offer.*\n因此在实际中，对 floating-point-limited的应用开启61 x 4 =244个线程。但随着244线程STREAM运行显示比61线程的总带宽少12％：\n*6.The best results with the compiler flags above were obtained with one thread per core. Using 2, 3, or 4 threads per core decreased the Triad bandwidth by approximately 4%, 8%, and 12%, respectively.*\n因此，考虑到对于每个线程的带宽，双路服务器现在是最好。\nSTREAM是用来衡量一个具体的方面 - 内存带宽，因此只“模拟”了一类应用：那些读取大量的内存，一个word一个word，仅对它们做一些很少的浮点运算，然后写回结果。还有其他类型的访存模式：例如，当程序中的工作集大小可以放在cache中时，并对cache中做许多迭代浮点运算，那么访存带宽是不那么重要。\n在第二副曲线图中，我们还没有考虑到设备浮点计算能力。Intel Xeon Phi具有较低的时钟频率，但每个时钟周期可以做更多的浮点运算。\n### 峰值计算能力的计算和machine balance\n我们来计算一下设备峰值浮点运算速度。对于Intel Xeon Phi，还有就是产品页面上的话：\n*2.Claim based on calculated theoretical peak double precision performance capability for a single coprocessor. <font color=red> 16 DP FLOPS/clock/core x 60 cores x 1.053GHz = 1.0108 TeraFlop/s. </font> *\n<font color=red>他们是如何达到 16 FLOPS/cycle？芯片内的SIMD unit是512 bit，所以它可容纳8个双精度（64位）的浮点数。Intel Xeon Phi支持乘加（FMA）指令，其中一个单指令执行一个乘法和一个加法操作，共两个浮点运算，如d←d x a + b（取寄存器d的数，乘以a，加b，并将返回结果保存在d）。例如，指令VFMADD132PD（或类似的）从该指令集架构参考手册（page 201 of 725）。英特尔的George Chrysos 确认了这一点。这样，每个cycle内，8个数进行2次浮点运算，因此2x 8 =16 FLOPS/cycle。\n</font>\n因此，如果你的代码对512 bit的浮点向量做一次乘法和一次加法（而不是两个加法，或两次乘法，或者别的什么，那么你可能会接近峰值性能。\n现在，我们需要分别计算双路和四路戴尔服务器的峰值浮点计算能力，这是基于Intel Xeon E5-2680和E5-4650处理器（均为8核，2.7GHz）。两个CPU都支持高级矢量扩展（AVX）。向量位宽是256 bit，这样可以容纳4个双精度浮点数。使用如上述的FMA指令，在一个周期内可以实现4加法和4次乘法，总共8 FLOPS/cycle。然后我们需要的乘以2.7 GHz的时钟频率，在乘以8个内核，并且通过插槽的数量。对双路服务器有345.6 GFLOPS，对双路服务器有691.2 GFLOPS GFLOPS。\n最后，我们知道每个设备的总内存带宽，以及每个设备的峰值浮点速度。有一个指标叫machine balance。它试图将并行计算机的各种复杂参数，其中许多都表现为非线性关系，转化为一个数字。当然，这种方法不精确。但它允许架构之间的粗糙比较。\n<font color=red>要计算machine balance，你需要将总内存带宽GWords/s除以峰值浮点运算速度GFLOPS。结果用 FLOPS/ Word进行测量，简单地说，它表示在内存到达下一个字来在处理之前，可以有多少浮点运算。</font>这是一个很大的简化。高数字（例如，30 FLOPS/Word）是一个不好的迹象，它们表明unbalanced machines：那就是，对每个word，在下一个word到来之前机器可以进行30次浮点运算。如果你的程序不需要对来自内存中的一个word进行30次浮点运算，CPU就不得不空闲，没有任何工作，直到下一个word进入，因为对于CPU内存访问速度太慢，因此，机器被称为unbalanced。 （同样，它是计算机如何工作的一个非常粗略的估计，因为一次cpu不可能一次只从内存中取出一个word，而是一个高速缓存行，等等）\n在这方面，相比于过去的矢量超级计算机，今天的许多机器都是unbalanced的。在现代机器高速缓冲存储器尝试缓解该问题。所以，让我们计算这三个计算设备的平衡性。对于Intel Xeon Phi会有三种情况- 61线程（每核1个线程），122线（每核2线程），并为244线（每核心4线程）。\n需要注意的是“一个线程只能两个时钟周期发出射一条向量指令”，因此，你每个核至少需要两个线程来达到最大指令发射效率。此外，“使用每个核3-4线程不增加最高发射指令效率，但往往有助于减少延迟。”\n因此，要充分利用英特尔至强融核的浮点计算能力，你有可能使用每核心2个或4个线程，因此从每个设备开启122或244线程，但对带宽受限的应用程序，为了使一个线程有更多的内存带宽，可以尝试每核1个线程。 （参见在帖子的末尾更新1）。\nIntel Xeon  Phi\n244线程：244线程的总带宽：142410 MB/s（161829减12％），或17.8GWords/s。61核的峰值浮点计算能力：16 DP FLOPS/cycle/corex 61 cores x 1053GHz=1027,7 GFLOPS。Machine balance：57.7 FLOPS/word。\n122线程：122线程的总带宽：155356 MB/s（161829减4％），或者19.4 GWords/s。峰值浮点计算力：相同。Machine balance：53 FLOPS/Word。\n61线程：61线程的总带宽: 161829 MB/s，或20.2 GWords/s。峰值浮点计算力：上述峰值的一半，即，513.9 GFLOPS，因为，如上所述，“一个线程只能每两个周期发射一条矢量指令”。Machine balance：25.4 FLOPS/word。\n双路Intel Xeon的服务器\n总带宽：77010 MB/s，或9.6GWords/s。峰值浮点计算力：345.6 GFLOPS。Machine balance：36 FLOPS/Word。\n四路Intel Xeon的服务器\n总带宽：83381 MB/s，或10.4GWord/s。峰值浮点性能：691.2 GFLOPS（见上文）。Machine balance：66.5 FLOPS/Word。\n下面是相应的图表（越低越好）：\n![Machine balance, FLOPS/Word (lower is better)](machinebalance.png)\n不要忘记从STREAM得到的图只模拟了一种内存访问模式。如果你的程序是缓存友好的，你会从高速缓存的内存带宽获益，这对于英特尔至强融核比L2和L1高速缓存分别是主内存带宽的7倍和15倍（在此[演示文稿](https://software.intel.com/en-us/articles/intel-xeon-phi-coprocessor-codename-knights-corner/ \"Title\")参见图14）。\n\nDr. McCalpin的这篇[博客帖子](http://blogs.utexas.edu/jdm4372/2012/11/17/some-comments-on-the-xeon-phi-coprocessor/)，还对比了Intel Xeon Phi的机器和NVIDIA'a GPU加速器的machine balance。\n\n\n感谢远阅读本文！要下载图形的源数据，请点击[这里](http://clusterdesign.org/wp-content/uploads/2013/02/xeon_memory_bandwidth_gnuplot.zip)。\n\n\n更新1 Dr. McCalpin指出，事实上，当他们使用每个Intel Xeon phi 的核心1，2或3个线程时，应用程序运行速度更快，而不是每核心最大数量4线程。\n\n\n","source":"_posts/bandwidthforinteldevice.md","raw":"title: Intel Xeon Phi的内存带宽\ndate: 2016-07-01 23:12:35\ntags: Intel Xeon Phi/MIC\ncategories: MIC/GPU\n---\n\n这篇文章翻译自[这里](http://clusterdesign.org/2013/02/memory-bandwidth-for-intel-xeon-phi-and-friends/)\n\nJohn D. McCalpin博士，非正式地称为“带宽博士“， 因为他发明了STREAM memory bandwidth benchmark，使用dell生产的Xeon phi和两个Xeon的服务器，三个设备使用的是在TACC的Stampede电脑。\n### Intel设备的总带宽\nIntel Xeon Phi实现的内存带宽大致161829 MB/s- 出现在图上的是使用2xCPU和4X CPU 基于Intel Xeon作为计算节点的的服务器。首先，每个设备总内存带宽：每个Xeon phi，或每个基于Xeon的服务器。\n![Memory bandwidth per device, MBytes/sec](bandwidth1.png)\n### Intel设备每个线程的带宽\n在试验中，STREAM使用的OpenMP线程数等于计算设备上的核心数。可以看出，英特尔至强融核主板提供了大量的带宽给它的核心。高端双路和四路服务器在总带宽上落后，四插槽服务器仅比其双插槽服务器略好。\n现在用总带宽除以计算设备上运行的线程数，可以得出一个线程可以多少使用的带宽：\n![Memory bandwidth per thread, MBytes/sec](bwperthread.png)\n为了充分利用Intel Xeon Phi浮点计算能力，需要每个内核启动4线程。下面是引用英特尔的James Reinders的一句话：\n*The Intel Xeon Phi coprocessor offers four hardware threads per core with sufficient memory capabilities and floating-point capabilities to make it generally impossible for a single thread per core to approach either limit. Highly tuned kernels of code may reach saturation with two threads, but generally applications need a minimum of three or four active threads per core to access all that the coprocessor can offer.*\n因此在实际中，对 floating-point-limited的应用开启61 x 4 =244个线程。但随着244线程STREAM运行显示比61线程的总带宽少12％：\n*6.The best results with the compiler flags above were obtained with one thread per core. Using 2, 3, or 4 threads per core decreased the Triad bandwidth by approximately 4%, 8%, and 12%, respectively.*\n因此，考虑到对于每个线程的带宽，双路服务器现在是最好。\nSTREAM是用来衡量一个具体的方面 - 内存带宽，因此只“模拟”了一类应用：那些读取大量的内存，一个word一个word，仅对它们做一些很少的浮点运算，然后写回结果。还有其他类型的访存模式：例如，当程序中的工作集大小可以放在cache中时，并对cache中做许多迭代浮点运算，那么访存带宽是不那么重要。\n在第二副曲线图中，我们还没有考虑到设备浮点计算能力。Intel Xeon Phi具有较低的时钟频率，但每个时钟周期可以做更多的浮点运算。\n### 峰值计算能力的计算和machine balance\n我们来计算一下设备峰值浮点运算速度。对于Intel Xeon Phi，还有就是产品页面上的话：\n*2.Claim based on calculated theoretical peak double precision performance capability for a single coprocessor. <font color=red> 16 DP FLOPS/clock/core x 60 cores x 1.053GHz = 1.0108 TeraFlop/s. </font> *\n<font color=red>他们是如何达到 16 FLOPS/cycle？芯片内的SIMD unit是512 bit，所以它可容纳8个双精度（64位）的浮点数。Intel Xeon Phi支持乘加（FMA）指令，其中一个单指令执行一个乘法和一个加法操作，共两个浮点运算，如d←d x a + b（取寄存器d的数，乘以a，加b，并将返回结果保存在d）。例如，指令VFMADD132PD（或类似的）从该指令集架构参考手册（page 201 of 725）。英特尔的George Chrysos 确认了这一点。这样，每个cycle内，8个数进行2次浮点运算，因此2x 8 =16 FLOPS/cycle。\n</font>\n因此，如果你的代码对512 bit的浮点向量做一次乘法和一次加法（而不是两个加法，或两次乘法，或者别的什么，那么你可能会接近峰值性能。\n现在，我们需要分别计算双路和四路戴尔服务器的峰值浮点计算能力，这是基于Intel Xeon E5-2680和E5-4650处理器（均为8核，2.7GHz）。两个CPU都支持高级矢量扩展（AVX）。向量位宽是256 bit，这样可以容纳4个双精度浮点数。使用如上述的FMA指令，在一个周期内可以实现4加法和4次乘法，总共8 FLOPS/cycle。然后我们需要的乘以2.7 GHz的时钟频率，在乘以8个内核，并且通过插槽的数量。对双路服务器有345.6 GFLOPS，对双路服务器有691.2 GFLOPS GFLOPS。\n最后，我们知道每个设备的总内存带宽，以及每个设备的峰值浮点速度。有一个指标叫machine balance。它试图将并行计算机的各种复杂参数，其中许多都表现为非线性关系，转化为一个数字。当然，这种方法不精确。但它允许架构之间的粗糙比较。\n<font color=red>要计算machine balance，你需要将总内存带宽GWords/s除以峰值浮点运算速度GFLOPS。结果用 FLOPS/ Word进行测量，简单地说，它表示在内存到达下一个字来在处理之前，可以有多少浮点运算。</font>这是一个很大的简化。高数字（例如，30 FLOPS/Word）是一个不好的迹象，它们表明unbalanced machines：那就是，对每个word，在下一个word到来之前机器可以进行30次浮点运算。如果你的程序不需要对来自内存中的一个word进行30次浮点运算，CPU就不得不空闲，没有任何工作，直到下一个word进入，因为对于CPU内存访问速度太慢，因此，机器被称为unbalanced。 （同样，它是计算机如何工作的一个非常粗略的估计，因为一次cpu不可能一次只从内存中取出一个word，而是一个高速缓存行，等等）\n在这方面，相比于过去的矢量超级计算机，今天的许多机器都是unbalanced的。在现代机器高速缓冲存储器尝试缓解该问题。所以，让我们计算这三个计算设备的平衡性。对于Intel Xeon Phi会有三种情况- 61线程（每核1个线程），122线（每核2线程），并为244线（每核心4线程）。\n需要注意的是“一个线程只能两个时钟周期发出射一条向量指令”，因此，你每个核至少需要两个线程来达到最大指令发射效率。此外，“使用每个核3-4线程不增加最高发射指令效率，但往往有助于减少延迟。”\n因此，要充分利用英特尔至强融核的浮点计算能力，你有可能使用每核心2个或4个线程，因此从每个设备开启122或244线程，但对带宽受限的应用程序，为了使一个线程有更多的内存带宽，可以尝试每核1个线程。 （参见在帖子的末尾更新1）。\nIntel Xeon  Phi\n244线程：244线程的总带宽：142410 MB/s（161829减12％），或17.8GWords/s。61核的峰值浮点计算能力：16 DP FLOPS/cycle/corex 61 cores x 1053GHz=1027,7 GFLOPS。Machine balance：57.7 FLOPS/word。\n122线程：122线程的总带宽：155356 MB/s（161829减4％），或者19.4 GWords/s。峰值浮点计算力：相同。Machine balance：53 FLOPS/Word。\n61线程：61线程的总带宽: 161829 MB/s，或20.2 GWords/s。峰值浮点计算力：上述峰值的一半，即，513.9 GFLOPS，因为，如上所述，“一个线程只能每两个周期发射一条矢量指令”。Machine balance：25.4 FLOPS/word。\n双路Intel Xeon的服务器\n总带宽：77010 MB/s，或9.6GWords/s。峰值浮点计算力：345.6 GFLOPS。Machine balance：36 FLOPS/Word。\n四路Intel Xeon的服务器\n总带宽：83381 MB/s，或10.4GWord/s。峰值浮点性能：691.2 GFLOPS（见上文）。Machine balance：66.5 FLOPS/Word。\n下面是相应的图表（越低越好）：\n![Machine balance, FLOPS/Word (lower is better)](machinebalance.png)\n不要忘记从STREAM得到的图只模拟了一种内存访问模式。如果你的程序是缓存友好的，你会从高速缓存的内存带宽获益，这对于英特尔至强融核比L2和L1高速缓存分别是主内存带宽的7倍和15倍（在此[演示文稿](https://software.intel.com/en-us/articles/intel-xeon-phi-coprocessor-codename-knights-corner/ \"Title\")参见图14）。\n\nDr. McCalpin的这篇[博客帖子](http://blogs.utexas.edu/jdm4372/2012/11/17/some-comments-on-the-xeon-phi-coprocessor/)，还对比了Intel Xeon Phi的机器和NVIDIA'a GPU加速器的machine balance。\n\n\n感谢远阅读本文！要下载图形的源数据，请点击[这里](http://clusterdesign.org/wp-content/uploads/2013/02/xeon_memory_bandwidth_gnuplot.zip)。\n\n\n更新1 Dr. McCalpin指出，事实上，当他们使用每个Intel Xeon phi 的核心1，2或3个线程时，应用程序运行速度更快，而不是每核心最大数量4线程。\n\n\n","slug":"bandwidthforinteldevice","published":1,"updated":"2016-07-02T02:24:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciszjc4zw000lbgs66u4eqwmq"},{"title":"字符串匹配--KMP算法","date":"2016-07-11T14:21:30.000Z","_content":"字符串匹配是经常用到的操作，KMP算法是由3个人的名字的开头字母组成的，KMP算法的全称是Knuth-Morris-Pratt算法，其中K就是大名鼎鼎的Donald Knuth。\n##  **暴力匹配**\n字符串匹配简单的方法使用暴力算法。使用的示例是T = xyxxyxyxyyxyxyxyyxyxyxx， P = xyxyyxyxyxx, 要在T中找到P中开始出现的位置。\n![暴力求解过程](robust.jpg)\n第一次因为T[4] 和 P[4]不匹配, 则重新开始，从T[2]开始，依次比较。\n## **KMP算法**\n### **改进**\n回过头看看暴力求解的算法，其实当没匹配时，没必要每次向右移动一位重新进行比较，因为当在某个位置T与P不匹配时，可以利用已经匹配的位置的信息来将P尽量一次向右移动多位。\n比如上图中的匹配过程，在第4次匹配过程中，当匹配到第5个字符时，发现了不匹配字符，但是前面4个字符是匹配的，通过P可以知道T中匹配的4个字符xyxy，这四个字符的后缀是P[1..4]=xyxy，P[2..4]=yxy，P[3..4]=xy，P[4..4]=y，去掉第一个后缀后，则剩下P[2..4]=yxy，P[3..4]=xy，P[4..4]=y，我们让这三个后缀与匹配的字符串从开始位置进行比较，发现P[3..4]=xy可以匹配4个字符中的前两个字符，我们可以直接将P向右移动两位，因为我们知道向右移动一位T中与P比较的3个字符就是yxy, 但是这三个字符通过上面P[2..4]的比较过程可以知道并不能与P中前三个字符匹配，因此可以直接跳过。\n### **next表**\n注意上述的过程是可以重复使用的，比如没动T中的字符与P[5]不匹配时，都可以将P字符串向右移动两位，因此我们有必要建一张表，表中存的信息是当某位与T中的字符不匹配时我们应该将P字符串向右移动几位，这张表我们称为next表。\n为了理解这张表是如何构造的，我们在说明一下，在暴力匹配中的第6次匹配过程中，P[11]与T中的字符不匹配，考察P[1..10]=xyxyyxyxyx, 因为刚经过匹配，可以知道P[1..10]=A[6..15]，因此可以利用这个信息来确定需要将P向右移动几位。这就是计算和P中的前缀匹配的P[1..10]中的最大后缀，和前面的例子类似，如图可以看出满足条件的后缀长度是3。\n![求匹配的最长后缀](suffix.jpg)\n下面介绍构造表的思想，对每个P中的位置i都要计算出P[1..(i-1)]的最大后缀，如果后缀的长度是j，则T中当前不匹配的字符就可以跳过多余的比较过程直接跟P[j+1]比较，因为已经知道T中最近匹配的j个字符能和P的前缀字符匹配。而且还可以知道我们得到的是最大后缀，所以P在向左一位就不能匹配了。\n现在假设有了next表，next表中的值如下图\n\n| 位置  | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11|\n| :---:| :---: | :---: |:---: | :---: | :---: |:--- :| :---: | :---: |:---: | :---: | :---: |\n| 字符 | x | y | x | y | y | x | y | x | y | x | x |\n| next | -1 | 0 | 0 | 1 | 2 | 0 | 1 | 2 | 3 | 4 | 3 |\n### **匹配算法**\n现在有了next表，介绍一下匹配过程。\n\n>T中的字符与P中的字符一一比较，直到出现不匹配。假设不匹配发生在P[i], 查找next表，然后将当前的T中的字符与P[next[i]+1]比较，仍然不匹配，则与P[next[next[i]+1]+1]比较，直到匹配为止。若最后到P[1]仍不匹配，在T中向右移动一位，重新开始匹配过程。\n\n### **next表的计算**\n现在介绍如何计算next表。利用归纳法，现在next[2]=0作为归纳基础，假设计算出1,2,3....i-1的next值，可以根据计算出来的next值计算next[i],分两种情况：\n>1.若P[ -1]=P[next[i-1]+1],说明P[i-1]可以扩展最大后缀，next[i] = next[i-1] + 1;\n>2.若P[i-1]!=P[next[i-1]+1],现在已经知道P[1..(i-2)]的最大后缀是和P[1..next[i-1]]匹配的，P[i-1]!=P[next[i-1]+1],相当于在P[next[i-1]+1]处发生了不匹配。上面的匹配过程已经说过，若P[next[i-1]+1]不匹配，就去查P[next[next[i-1]+1]+1],看是否与P[i-1]相匹配，直到查到匹配，或是回到开始位置。\n\n## **复杂度**\nT中的字符要与P中的字符比较，若匹配，则继续，若不匹配，则T中的当前字符要与P中next表中指向的字符比较。若T[i]不匹配，那么需要查找几次next表呢，若与P[k]不匹配，最多查找k次，这相当于P向前移动了k位，最多需要前移n次，因此算法复杂度为O(n)。\n\n注：本文是根据《算法引论——一种创造性方法》（Introdction to Algorithms: A Creative Approach）中的5.8节整理。\n","source":"_posts/KMP.md","raw":"title: 字符串匹配--KMP算法\ndate: 2016-07-11 22:21:30\ntags: algorithms\ncategories: algorithms\n---\n字符串匹配是经常用到的操作，KMP算法是由3个人的名字的开头字母组成的，KMP算法的全称是Knuth-Morris-Pratt算法，其中K就是大名鼎鼎的Donald Knuth。\n##  **暴力匹配**\n字符串匹配简单的方法使用暴力算法。使用的示例是T = xyxxyxyxyyxyxyxyyxyxyxx， P = xyxyyxyxyxx, 要在T中找到P中开始出现的位置。\n![暴力求解过程](robust.jpg)\n第一次因为T[4] 和 P[4]不匹配, 则重新开始，从T[2]开始，依次比较。\n## **KMP算法**\n### **改进**\n回过头看看暴力求解的算法，其实当没匹配时，没必要每次向右移动一位重新进行比较，因为当在某个位置T与P不匹配时，可以利用已经匹配的位置的信息来将P尽量一次向右移动多位。\n比如上图中的匹配过程，在第4次匹配过程中，当匹配到第5个字符时，发现了不匹配字符，但是前面4个字符是匹配的，通过P可以知道T中匹配的4个字符xyxy，这四个字符的后缀是P[1..4]=xyxy，P[2..4]=yxy，P[3..4]=xy，P[4..4]=y，去掉第一个后缀后，则剩下P[2..4]=yxy，P[3..4]=xy，P[4..4]=y，我们让这三个后缀与匹配的字符串从开始位置进行比较，发现P[3..4]=xy可以匹配4个字符中的前两个字符，我们可以直接将P向右移动两位，因为我们知道向右移动一位T中与P比较的3个字符就是yxy, 但是这三个字符通过上面P[2..4]的比较过程可以知道并不能与P中前三个字符匹配，因此可以直接跳过。\n### **next表**\n注意上述的过程是可以重复使用的，比如没动T中的字符与P[5]不匹配时，都可以将P字符串向右移动两位，因此我们有必要建一张表，表中存的信息是当某位与T中的字符不匹配时我们应该将P字符串向右移动几位，这张表我们称为next表。\n为了理解这张表是如何构造的，我们在说明一下，在暴力匹配中的第6次匹配过程中，P[11]与T中的字符不匹配，考察P[1..10]=xyxyyxyxyx, 因为刚经过匹配，可以知道P[1..10]=A[6..15]，因此可以利用这个信息来确定需要将P向右移动几位。这就是计算和P中的前缀匹配的P[1..10]中的最大后缀，和前面的例子类似，如图可以看出满足条件的后缀长度是3。\n![求匹配的最长后缀](suffix.jpg)\n下面介绍构造表的思想，对每个P中的位置i都要计算出P[1..(i-1)]的最大后缀，如果后缀的长度是j，则T中当前不匹配的字符就可以跳过多余的比较过程直接跟P[j+1]比较，因为已经知道T中最近匹配的j个字符能和P的前缀字符匹配。而且还可以知道我们得到的是最大后缀，所以P在向左一位就不能匹配了。\n现在假设有了next表，next表中的值如下图\n\n| 位置  | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11|\n| :---:| :---: | :---: |:---: | :---: | :---: |:--- :| :---: | :---: |:---: | :---: | :---: |\n| 字符 | x | y | x | y | y | x | y | x | y | x | x |\n| next | -1 | 0 | 0 | 1 | 2 | 0 | 1 | 2 | 3 | 4 | 3 |\n### **匹配算法**\n现在有了next表，介绍一下匹配过程。\n\n>T中的字符与P中的字符一一比较，直到出现不匹配。假设不匹配发生在P[i], 查找next表，然后将当前的T中的字符与P[next[i]+1]比较，仍然不匹配，则与P[next[next[i]+1]+1]比较，直到匹配为止。若最后到P[1]仍不匹配，在T中向右移动一位，重新开始匹配过程。\n\n### **next表的计算**\n现在介绍如何计算next表。利用归纳法，现在next[2]=0作为归纳基础，假设计算出1,2,3....i-1的next值，可以根据计算出来的next值计算next[i],分两种情况：\n>1.若P[ -1]=P[next[i-1]+1],说明P[i-1]可以扩展最大后缀，next[i] = next[i-1] + 1;\n>2.若P[i-1]!=P[next[i-1]+1],现在已经知道P[1..(i-2)]的最大后缀是和P[1..next[i-1]]匹配的，P[i-1]!=P[next[i-1]+1],相当于在P[next[i-1]+1]处发生了不匹配。上面的匹配过程已经说过，若P[next[i-1]+1]不匹配，就去查P[next[next[i-1]+1]+1],看是否与P[i-1]相匹配，直到查到匹配，或是回到开始位置。\n\n## **复杂度**\nT中的字符要与P中的字符比较，若匹配，则继续，若不匹配，则T中的当前字符要与P中next表中指向的字符比较。若T[i]不匹配，那么需要查找几次next表呢，若与P[k]不匹配，最多查找k次，这相当于P向前移动了k位，最多需要前移n次，因此算法复杂度为O(n)。\n\n注：本文是根据《算法引论——一种创造性方法》（Introdction to Algorithms: A Creative Approach）中的5.8节整理。\n","slug":"KMP","published":1,"updated":"2016-07-11T14:35:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciszjc509000obgs6it6qy1q7"}],"PostAsset":[{"_id":"source/_posts/bandwidthforinteldevice/bandwidth1.png","post":"ciszjc4zw000lbgs66u4eqwmq","slug":"bandwidth1.png","modified":1},{"_id":"source/_posts/bandwidthforinteldevice/bwperthread.png","post":"ciszjc4zw000lbgs66u4eqwmq","slug":"bwperthread.png","modified":1},{"_id":"source/_posts/bandwidthforinteldevice/machinebalance.png","post":"ciszjc4zw000lbgs66u4eqwmq","slug":"machinebalance.png","modified":1},{"_id":"source/_posts/KMP/robust.jpg","post":"ciszjc509000obgs6it6qy1q7","slug":"robust.jpg","modified":1},{"_id":"source/_posts/KMP/suffix.jpg","post":"ciszjc509000obgs6it6qy1q7","slug":"suffix.jpg","modified":1}],"PostCategory":[{"post_id":"ciszjc4ze0001bgs6n4r7birx","category_id":"ciszjc4zi0002bgs690mmatu0","_id":"ciszjc4zl0005bgs6e37d8e3v"},{"post_id":"ciszjc4zn0006bgs6lyezbvg6","category_id":"ciszjc4zo0007bgs6j9drc6ht","_id":"ciszjc4zp000abgs6ybxbpqqp"},{"post_id":"ciszjc4zp000bbgs6qwhmrkfu","category_id":"ciszjc4zr000cbgs6wok4h29i","_id":"ciszjc4zs000fbgs6whwtt7wg"},{"post_id":"ciszjc4zu000gbgs6vv1oocrq","category_id":"ciszjc4zu000hbgs6i8w6e2kx","_id":"ciszjc4zv000kbgs629p45aqv"},{"post_id":"ciszjc4zw000lbgs66u4eqwmq","category_id":"ciszjc4zo0007bgs6j9drc6ht","_id":"ciszjc4zx000mbgs6g7djz35y"},{"post_id":"ciszjc509000obgs6it6qy1q7","category_id":"ciszjc50a000pbgs69n37z13i","_id":"ciszjc50a000sbgs6v9745y6d"}],"PostTag":[{"post_id":"ciszjc4ze0001bgs6n4r7birx","tag_id":"ciszjc4zj0003bgs6rddc9i99","_id":"ciszjc4zl0004bgs6dwa85bqt"},{"post_id":"ciszjc4zn0006bgs6lyezbvg6","tag_id":"ciszjc4zo0008bgs65ct4cm57","_id":"ciszjc4zo0009bgs69h78mpnc"},{"post_id":"ciszjc4zp000bbgs6qwhmrkfu","tag_id":"ciszjc4zr000dbgs69rbtfsmb","_id":"ciszjc4zs000ebgs61hrs898n"},{"post_id":"ciszjc4zu000gbgs6vv1oocrq","tag_id":"ciszjc4zu000ibgs6skax35pv","_id":"ciszjc4zv000jbgs6cb0zmf8n"},{"post_id":"ciszjc4zw000lbgs66u4eqwmq","tag_id":"ciszjc4zo0008bgs65ct4cm57","_id":"ciszjc4zx000nbgs6v1ricg72"},{"post_id":"ciszjc509000obgs6it6qy1q7","tag_id":"ciszjc50a000qbgs6kug30bsw","_id":"ciszjc50a000rbgs6inq6hoed"}],"Tag":[{"name":"vim","_id":"ciszjc4zj0003bgs6rddc9i99"},{"name":"Intel Xeon Phi/MIC","_id":"ciszjc4zo0008bgs65ct4cm57"},{"name":"hexo","_id":"ciszjc4zr000dbgs69rbtfsmb"},{"name":"C/C++","_id":"ciszjc4zu000ibgs6skax35pv"},{"name":"algorithms","_id":"ciszjc50a000qbgs6kug30bsw"}]}}